<?phprequire_once dirname ( __FILE__ ) . '/AppService.class.php';// Don't require these classes again, require only AppService.class on each pageclass AppServiceImpl implements AppService {    // Attributes are xDAO onjects    private $agentDAO;    private $assignmentParticipantDepartmentDAO;    private $assignmentParticipantEnterpriseDAO;    private $assignmentSpStoreDAO;    private $departmentDAO;    private $enterpriseDAO;    private $enterpriseContactDAO;    private $logDAO;    private $lunchDAO;    private $participantDAO;    private $participationDAO;    private $presentDAO;    private $profileDAO;    private $providerPresentDAO;    private $purchasingFairDAO;    private $qrcodeScanDAO;    private $requirementDAO;    private $salespersonDAO;    private $specialGuestDAO;    private $storeWorkforceDAO;    private $statDAO;    private $typeofPfDAO;    private $typeOfProviderDAO; // Ã  la connection on SET le type de l'entreprise    private $unavailabilityDAO;    private $unavailabilitySpDAO;    private $prise_rdv_storeDAO;    private $logPriseRdvDAO;        private static $instance = null; // For Singleton use    // Constructor    function __construct() {        $this->agentDAO = new AgentDAO();        $this->assignmentParticipantDepartmentDAO = new AssignmentParticipantDepartmentDAO();        $this->assignmentParticipantEnterpriseDAO = new AssignmentParticipantEnterpriseDAO();        $this->assignmentSpStoreDAO = new AssignmentSpStoreDAO();        $this->departmentDAO = new DepartmentDAO();        $this->enterpriseDAO = new EnterpriseDAO();        $this->enterpriseContactDAO = new EnterpriseContactDAO();        $this->logDAO = new LogDAO();        $this->lunchDAO = new LunchDAO();        $this->participantDAO = new ParticipantDAO();        $this->participationDAO = new ParticipationDAO();        $this->presentDAO = new PresentDAO();        $this->profileDAO = new ProfileDAO();        $this->providerPresentDAO = new ProviderPresentDAO();        $this->qrcodeScanDAO = new QRCodeScanDAO();         $this->purchasingFairDAO = new PurchasingFairDAO();         $this->requirementDAO = new RequirementDAO();         $this->salespersonDAO = new SalespersonDAO();        $this->specialGuestDAO = new SpecialGuestDAO();         $this->statDAO = new StatDAO();        $this->storeWorkforceDAO = new StoreWorkforceDAO();        $this->typeofPfDAO = new TypeOfPfDAO();        $this->typeOfProviderDAO = new TypeOfProviderDAO();        $this->unavailabilityDAO = new UnavailabilityDAO();         $this->unavailabilitySpDAO = new UnavailabilitySpDAO();         $this->prise_rdv_storeDAO = new prise_rdv_storeDAO();        $this->logPriseRdvDAO = new logPriseRdvDAO();    }        // Singleton    public static function getInstance() {        if(is_null(self::$instance)) { self::$instance = new AppServiceImpl(); }        return self::$instance;    }       private function __clone() { } // Method of cloning also in private    /* ------------------------------------------------ prise_rdv_storeDAO methods ------------------------------------------------ */    public function createPriseRdvStore( $idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime, $jourString, $startString, $endString ) { return $createPriseRdvStore = new prise_rdv_store( $idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime, $jourString, $startString, $endString ); }    public function deletePriseRdvStore(prise_rdv_store $prise_rdv_store) { return $this->prise_rdv_storeDAO->delete($prise_rdv_store); }    public function findOnePriseRdvStore($searchedIdRDV) {         $newPriseRdvStore = $this->prise_rdv_storeDAO->findByIdRDV($searchedIdRDV);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findOnePriseRdvByIdCommercial($searchedIdCommercial,$searchedIdStore) {         $newPriseRdvStore = $this->prise_rdv_storeDAO->findByIdCommercial($searchedIdCommercial,$searchedIdStore);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findOnePriseRdvByIdCommercialAndPF($searchedIdCommercial,$searchedIdStore,$searchedIdPurchasingFair) {         $newPriseRdvStore = $this->prise_rdv_storeDAO->findByIdCommercialAndPF($searchedIdCommercial,$searchedIdStore,$searchedIdPurchasingFair);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findIndisposOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findIndisposOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findIndispoSameHourWithOtherStoreWithSp($searchedIdPurchasingFair,$searchedIdCommercial,$jourString,$searchedIdStore){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findIndispoSameHourWithOtherStoreWithSp($searchedIdPurchasingFair,$searchedIdCommercial,$jourString,$searchedIdStore);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findTwoPriseRdvStore($searchedIdStore, $searchedIdPurchasingFair){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByTwo($searchedIdStore, $searchedIdPurchasingFair);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findPriseRdvByTwo($jourString, $searchedIdPurchasingFair){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findPriseRdvByTwo($jourString, $searchedIdPurchasingFair);        return $newPriseRdvStore;    }    public function findThreePriseRdvStoreBis($searchedIdStore, $searchedIdPurchasingFair, $jourString){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByThreeBis($searchedIdStore, $searchedIdPurchasingFair, $jourString);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findCommerciauxFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findCommerciauxFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair);        return $newPriseRdvStore;    }    public function findCommerciauxFournisseurByThreeBis($searchedIdProvider, $searchedIdPurchasingFair, $idCommercial){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findCommerciauxFournisseurByThreeBis($searchedIdProvider, $searchedIdPurchasingFair, $idCommercial);        return $newPriseRdvStore;    }    public function findRdvFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair, $jourString){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair, $jourString);        return $newPriseRdvStore;    }    public function findRdvCommercialByThree($searchedIdCommecial, $searchedIdPurchasingFair, $jourString){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvCommercialByThree($searchedIdCommecial, $searchedIdPurchasingFair, $jourString);        return $newPriseRdvStore;    }    public function findRdvFournisseurByQuattro($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvFournisseurByQuattro($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore);        return $newPriseRdvStore;    }    public function findRdvCommercialByQuattro($searchedIdCommecial, $searchedIdPurchasingFair, $jourString, $idStore){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvCommercialByQuattro($searchedIdCommecial, $searchedIdPurchasingFair, $jourString, $idStore);        return $newPriseRdvStore;    }    public function findRdvFournisseurByQuattroBis($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idCommercial){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvFournisseurByQuattroBis($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idCommercial);        return $newPriseRdvStore;    }    public function findRdvFournisseurByCinq($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore, $idCommercial){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvFournisseurByCinq($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore, $idCommercial);        return $newPriseRdvStore;    }    public function findThreePriseRdvStore($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByThree($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findByQuatre($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString){        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByQuatre($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString);        return $newPriseRdvStore;    }    public function findAllPriseRdvStore() {        $newPriseRdvStore = $this->prise_rdv_storeDAO->findAll();        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findByAll($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime) {        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByAll($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function findByAllBis($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime) {        $newPriseRdvStore = $this->prise_rdv_storeDAO->findByAllBis($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime);        //if($newPriseRdvStore != null) {}        return $newPriseRdvStore;    }    public function savePriseRdvStore(prise_rdv_store $prise_rdv_store) { return $this->prise_rdv_storeDAO->save($prise_rdv_store); }    public function findRdvSameDayWithOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString,$startString, $endString) {        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvSameDayWithOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString,$startString, $endString);        return $newPriseRdvStore;    }    public function findRdvSameHourWithOtherStoreWithSp($searchedIdPurchasingFair,$searchedIdCommercial,$jourString,$startString, $endString,$idstore) {        $newPriseRdvStore = $this->prise_rdv_storeDAO->findRdvSameHourWithOtherStoreWithSp($searchedIdPurchasingFair, $searchedIdCommercial, $jourString, $startString, $endString, $idstore);        return $newPriseRdvStore;    }    function getHourFromRange($StartTime, $EndTime){ // params au format : 08:00        $tab3 = ["07:00:00 - 07:30:00","07:30:00 - 08:00:00","08:00:00 - 08:30:00","08:30:00 - 09:00:00","09:00:00 - 09:30:00","09:30:00 - 10:00:00","10:00:00 - 10:30:00","10:30:00 - 11:00:00","11:00:00 - 11:30:00","11:30:00 - 12:00:00","12:00:00 - 12:30:00","12:30:00 - 13:00:00","13:00:00 - 13:30:00","13:30:00 - 14:00:00","14:00:00 - 14:30:00","14:30:00 - 15:00:00","15:00:00 - 15:30:00","15:30:00 - 16:00:00","16:00:00 - 16:30:00","16:30:00 - 17:00:00","17:00:00 - 17:30:00","17:30:00 - 18:00:00","18:00:00 - 18:30:00","18:30:00 - 19:00:00","19:00:00 - 19:30:00","19:30:00 - 20:00:00"];        $arrayTpm = array(); //array contenant le crÃ©neau de rendez-vous souhaitÃ© avec le fournisseur selectionnÃ©        $EndTimeBis = substr($EndTime, 0,2).substr($EndTime, 3,2).'00';        for ($i=0; $i < sizeof($tab3); $i++) {            $var1 = substr($tab3[$i], 0, 8); // ex : $var1 = 08:00:00            if($var1 == $StartTime.':00'){                for($j=$i; $j < sizeof($tab3); $j++){                    $var1bis = substr($tab3[$j], 0, 8); // ex : $var1 = 08:00:00                    $var2 = substr($tab3[$j], 11, 8); // ex : $var1 = 08:30:00                    $var2bis = substr($var2, 0,2).substr($var2, 3,2).substr($var2, 6,2); //format : ex : 083000                    if($var2bis <= $EndTimeBis){                        $arrayTpm[] = $var1bis.' - '.$var2;                    }                }            }        }        return $arrayTpm;    }    public function deleteRDV($idPurchasingFair, $idStore, $idFournisseur, $start_datetime){        return $this->prise_rdv_storeDAO->delete($idPurchasingFair, $idStore, $idFournisseur, $start_datetime);    }    public function findAllEnterprisesAsStoresPfBis($searchedIdPurchasingFair) {         $arrayStoresPf = $this->prise_rdv_storeDAO->findByIdPfBis($searchedIdPurchasingFair);        return $arrayStoresPf;    }    public function findAllEnterprisesAsProviderPfBis($searchedIdPurchasingFair) {         $arrayStoresPf = $this->prise_rdv_storeDAO->findByIdPfBisProvider($searchedIdPurchasingFair);        return $arrayStoresPf;    }    /* ------------------------------------------------ ./prise_rdv_storeDAO methods ------------------------------------------------ */    /* ------------------------------------------------ UnavailabilityDAO methods ------------------------------------------------  */    public function createUnavailability($startDatetime, $endDatetime, $idEnterprise, $idPurchasingFair) { return $createdUnavailability = new Unavailability($startDatetime, $endDatetime, $idEnterprise, $idPurchasingFair); }    public function deactivateUnavailability(Unavailability $unavailability) { return $this->unavailabilityDAO->deactivate($unavailability); }    public function deleteUnavailability(Unavailability $unavailability) { return $this->unavailabilityDAO->delete($unavailability); }    public function findOneUnavailability($searchedIdUnavailability) {         $newUnavailability = $this->unavailabilityDAO->findById($searchedIdUnavailability);        if( $newUnavailability != null ) {              $newUnavailability->setOneEnterprise($this->findOneEnterprise($newUnavailability->getOneEnterprise())); // OneEnterprise = id            $newUnavailability->setOnePurchasingFair($this->findOnePurchasingFair($newUnavailability->getOnePurchasingFair())); // OnePurchasingFair = id            $newUnavailability->getOneEnterprise()->setOneProfile($this->findOneProfile($newUnavailability->getOneEnterprise()->getOneProfile()->getIdProfile()));            $newUnavailability->getOneEnterprise()->setOneDepartment($this->findOneDepartment($newUnavailability->getOneEnterprise()->getOneDepartment()->getIdDepartment()));        }        return $newUnavailability;    }    public function findAllUnavailabilities() {         $arrayUnavailabilities = $this->unavailabilityDAO->findAll();        foreach($arrayUnavailabilities as $value) {            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise())); // OneEnterprise = id            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair())); // OnePurchasingFair = id            $value->getOneEnterprise()->setOneProfile($this->findOneProfile($value->getOneEnterprise()->getOneProfile()->getIdProfile()));            $value->getOneEnterprise()->setOneDepartment($this->findOneDepartment($value->getOneEnterprise()->getOneDepartment()->getIdDepartment()));        }        return $arrayUnavailabilities;    }    public function findEnterpriseUnavailabilities(Enterprise $enterprise, PurchasingFair $purchasingFair) {        $arrayUnavailabilities = $this->unavailabilityDAO->findEnterpriseUnavailabilities($enterprise, $purchasingFair);             foreach($arrayUnavailabilities as $value) {            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise())); // OneEnterprise = id            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair())); // OnePurchasingFair = id            $value->getOneEnterprise()->setOneProfile($this->findOneProfile($value->getOneEnterprise()->getOneProfile()->getIdProfile()));            $value->getOneEnterprise()->setOneDepartment($this->findOneDepartment($value->getOneEnterprise()->getOneDepartment()->getIdDepartment()));        }        return $arrayUnavailabilities;    }    public function saveUnavailability(Unavailability $unavailability) { return $this->unavailabilityDAO->save($unavailability); }    public function findPurchasingFairUnavailabilities(PurchasingFair $purchasingFair) { return $this->unavailabilityDAO->findPurchasingFairUnavailabilities($purchasingFair); }    /* ------------------------------------------------ ./UnavailabilityDAO methods ------------------------------------------------  */              /* ------------------------------------------------ UnavailabilitySpDAO methods ------------------------------------------------  */    public function createUnavailabilitySp($startDatetime, $endDatetime, $idParticipant, $idPurchasingFair) { return $createdUnavailabilitySp = new UnavailabilitySp($startDatetime, $endDatetime, $idParticipant, $idPurchasingFair); }    public function deactivateUnavailabilitySp(UnavailabilitySp $unavailabilitySp) { return $this->unavailabilitySpDAO->deactivate($unavailabilitySp); }    public function deleteUnavailabilitySp(UnavailabilitySp $unavailabilitySp) { return $this->unavailabilitySpDAO->delete($unavailabilitySp); }    public function findOneUnavailabilitySp($searchedIdUnavailabilitySp) {         $newUnavailabilitySp = $this->unavailabilitySpDAO->findById($searchedIdUnavailabilitySp);        if( $newUnavailabilitySp != null ) {              $newUnavailabilitySp->setOneParticipant($this->findOneParticipant($newUnavailabilitySp->getOneParticipant())); // OneParticipant = id            $newUnavailabilitySp->setOnePurchasingFair($this->findOnePurchasingFair($newUnavailabilitySp->getOnePurchasingFair())); // OnePurchasingFair = id        }        return $newUnavailabilitySp;    }    public function findAllUnavailabilitiesSp() {         $arrayUnavailabilitiesSp = $this->unavailabilitySpDAO->findAll();        foreach($arrayUnavailabilitiesSp as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant())); // OneParticipant = id            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair())); // OnePurchasingFair = id        }        return $arrayUnavailabilitiesSp;    }    public function findAllUnavailabilitiesSpByParticipant($searchedIdParticipant) {         $arrayUnavailabilitiesSp = $this->unavailabilitySpDAO->findByIdParticipant($searchedIdParticipant);        foreach($arrayUnavailabilitiesSp as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant())); // OneParticipant = id            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair())); // OnePurchasingFair = id        }        return $arrayUnavailabilitiesSp;    }    public function findParticipantUnavailabilitiesSp(Participant $participant, PurchasingFair $purchasingFair) {        $arrayUnavailabilitiesSp = $this->unavailabilitySpDAO->findParticipantUnavailabilitiesSp($participant, $purchasingFair);             foreach($arrayUnavailabilitiesSp as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant())); // OneEnterprise = id            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair())); // OnePurchasingFair = id        }        return $arrayUnavailabilitiesSp;    }    public function saveUnavailabilitySp(UnavailabilitySp $unavailabilitySp) { return $this->unavailabilitySpDAO->save($unavailabilitySp); }    public function findPurchasingFairUnavailabilitiesSp(PurchasingFair $purchasingFair) { return $this->unavailabilitySpDAO->findPurchasingFairUnavailabilitiesSp($purchasingFair); }    public function findSpWithUnavByEntAndPf($idEnterprise, $idPurchasingFair) { return $this->unavailabilitySpDAO->findSpWithUnavByEntAndPf($idEnterprise, $idPurchasingFair); }    /* ------------------------------------------------ ./UnavailabilitySpDAO methods ------------------------------------------------  */        /* ------------------------------------------------ PurchasingFairDAO methods ------------------------------------------------ */    public function createPurchasingFair($namePurchasingFair, $hexColor, $dayRdv, $startDatetime, $endDateTime, $lunchBreak, $oneTypeOfPf, $registrationClosingDateMagasin, $registrationClosingDateFournisseur) { return $createdPurchasingFair = new PurchasingFair($namePurchasingFair, $hexColor, $dayRdv, $startDatetime, $endDateTime, $lunchBreak, $oneTypeOfPf, $registrationClosingDateMagasin, $registrationClosingDateFournisseur); }    public function deactivatePurchasingFair(PurchasingFair $purchasingFair) { return $this->purchasingFairDAO->deactivate($purchasingFair); }    public function deletePurchasingFair(PurchasingFair $purchasingFair) { return $this->purchasingFairDAO->delete($purchasingFair); }    public function findOnePurchasingFair($searchedIdPurchasingFair) {         $newPurchasingFair = $this->purchasingFairDAO->findById($searchedIdPurchasingFair);        if($newPurchasingFair != null) {            $newPurchasingFair->setOneTypeOfPf($this->findOneTypeOfPf($newPurchasingFair->getOneTypeOfPf()));        }        return $newPurchasingFair;    }    public function findAllPurchasingFairs() {        $arrayPurchasingFairs = $this->purchasingFairDAO->findAll();        foreach($arrayPurchasingFairs as $value) {            $value->setOneTypeOfPf($this->findOneTypeOfPf($value->getOneTypeOfPf()));        }        return $arrayPurchasingFairs;     }    public function findAllPurchasingFairsAdmin() {        $arrayPurchasingFairs = $this->purchasingFairDAO->findAllAdmin();        foreach($arrayPurchasingFairs as $value) {            $value->setOneTypeOfPf($this->findOneTypeOfPf($value->getOneTypeOfPf()));        }        return $arrayPurchasingFairs;     }    public function findLastPurchasingFair() {        $arrayPurchasingFairs = $this->findAllPurchasingFairs();        return (count($arrayPurchasingFairs) > 0) ? $arrayPurchasingFairs[0] : null;    }    public function savePurchasingFair(PurchasingFair $purchasingFair) { return $this->purchasingFairDAO->save($purchasingFair); }    function getDatesFromRange($startDate, $endDate) {        $return = array($startDate);        $start = $startDate;        $i = 1;        if (strtotime($startDate) < strtotime($endDate)) {            while (strtotime($start) < strtotime($endDate)) {                $start = date('Y-m-d', strtotime($startDate . '+' . $i . ' days'));                $return[] = $start;                $i++;            }        }        return $return;    }    function nom_jour($date) {     $jour_semaine = array(1=>"Lundi", 2=>"Mardi", 3=>"Mercredi", 4=>"Jeudi", 5=>"Vendredi", 6=>"Samedi", 7=>"Dimanche");         list($annee, $mois, $jour) = explode ("-", $date);         $timestamp = mktime(0,0,0, date($mois), date($jour), date($annee));    $njour = date("N",$timestamp);         return $jour_semaine[$njour];         }    function nom_mois($date) {     $nom_mois = array(1=>"Janvier", 2=>"Fevrier", 3=>"Mars", 4=>"Avril", 5=>"Mai", 6=>"Juin", 7=>"Juillet", 8=>"Aout", 9=>"Septembre", 10=>"Octobre", 11=>"Novembre", 12=>"Decembre");         $res = substr($date, 5,2);    $resu =ltrim($res, "0");    //print_r($nom_mois[$resu]);         return $nom_mois[$resu];         }    /* ------------------------------------------------ ./PurchasingFairDAO methods ------------------------------------------------ */        /* ------------------------------------------------ EnterpriseDAO methods ------------------------------------------------ */    public function createEnterprise($name, $password, $panel, $postalAddress, $postalCode, $city, $vat, $oneTypeOfProvider, $oneProfile, $oneDepartment) {		return $createdEnterprise = new Enterprise($name, $password, $panel, $postalAddress, $postalCode, $city, $vat, $oneTypeOfProvider, $oneProfile, $oneDepartment);	}    public function authentication($mailEnterprise, $password, $profileEnterprise) {;        $enterpriseConnected = $this->enterpriseDAO->authentication($mailEnterprise, $password, $profileEnterprise);        if( $enterpriseConnected != null ) {            $enterpriseConnected->setOneTypeOfProvider($this->findOneTypeOfProvider($enterpriseConnected->getOneTypeOfProvider()));            $enterpriseConnected->setOneProfile($this->findOneProfile($enterpriseConnected->getOneProfile()));            $enterpriseConnected->setOneDepartment($this->findOneDepartment($enterpriseConnected->getOneDepartment()));        }        return $enterpriseConnected;    }    public function deactivateEnterprise(Enterprise $enterprise) { return $this->enterpriseDAO->deactivate($enterprise); }    public function deleteEnterprise(Enterprise $enterprise) { return $this->enterpriseDAO->delete($enterprise); }    public function findOneEnterprise($searchedIdEnterprise) {         $newEnterprise = $this->enterpriseDAO->findById($searchedIdEnterprise);        $newEnterprise->setOneTypeOfProvider($this->findOneTypeOfProvider($newEnterprise->getOneTypeOfProvider()));        $newEnterprise->setOneProfile($this->findOneProfile($newEnterprise->getOneProfile()));        $newEnterprise->setOneDepartment($this->findOneDepartment($newEnterprise->getOneDepartment()));        return $newEnterprise;    }    public function findAllEnterprises() {         $arrayEnterprises = $this->enterpriseDAO->findAll();        foreach($arrayEnterprises as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));        }        return $arrayEnterprises;    }    public function findAllEnterprisesAsProviders() {         $arrayProviders = $this->enterpriseDAO->findAllProviders();        foreach($arrayProviders as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayProviders;    }    public function findAllEnterprisesAsProvidersPf($searchedIdPurchasingFair) {         $arrayProvidersPf = $this->enterpriseDAO->findByIdPf($searchedIdPurchasingFair);        if(!empty($arrayProvidersPf)) {            foreach($arrayProvidersPf as $value) {                $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));                $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));                $value->setOneProfile($this->findOneProfile($value->getOneProfile()));            }        }        return (!empty($arrayProvidersPf)) ? $arrayProvidersPf : array();    }    public function findAllProvidersWithTextilePriority($idPurchasingFair) {         $arrayProvidersPf = $this->enterpriseDAO->findAllProvidersWithTextilePriority($idPurchasingFair);        if(!empty($arrayProvidersPf)) {            foreach($arrayProvidersPf as $value) {                $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));                $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));                $value->setOneProfile($this->findOneProfile($value->getOneProfile()));            }        }        return (!empty($arrayProvidersPf)) ? $arrayProvidersPf : array();    }    public function findAllEnterprisesAsStores() {         $arrayStores = $this->enterpriseDAO->findAllStores();        foreach($arrayStores as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayStores;    }    public function findAllEnterprisesAsStoresPf($searchedIdPurchasingFair) {         $arrayStoresPf = $this->enterpriseDAO->findByIdPf2($searchedIdPurchasingFair);        foreach($arrayStoresPf as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayStoresPf;    }    public function findAllEnterprisesAsStoresPfAbsent($searchedIdPurchasingFair) {         $arrayStoresPf = $this->enterpriseDAO->findByIdPf2Absent($searchedIdPurchasingFair);        foreach($arrayStoresPf as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayStoresPf;    }    public function saveEnterprise(Enterprise $enterprise) { return $this->enterpriseDAO->save($enterprise); }    public function saveEnterprisePasswordOVH(Enterprise $enterprise) { return $this->enterpriseDAO->updateForOVH($enterprise); }    public function findAllStoresNotAvailableForTimeSlotAndPf($onePurchasingFair, $startTimeSlot, $endTimeSlot) {        return $this->enterpriseDAO->findAllStoresNotAvailableForTimeSlotAndPf($onePurchasingFair, $startTimeSlot, $endTimeSlot);    }    public function findAllEnterprisesAsAdmin() {        $arrayAdmin = $this->enterpriseDAO->findAllAdmin();        foreach($arrayAdmin as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayAdmin;    }    public function authenticationAdmin($password) {;        $enterpriseAdmin = $this->enterpriseDAO->authenticationAdmin($password);        if( $enterpriseAdmin != null ) {            $enterpriseAdmin->setOneTypeOfProvider($this->findOneTypeOfProvider($enterpriseAdmin->getOneTypeOfProvider()));            $enterpriseAdmin->setOneProfile($this->findOneProfile($enterpriseAdmin->getOneProfile()));            $enterpriseAdmin->setOneDepartment($this->findOneDepartment($enterpriseAdmin->getOneDepartment()));        }        return $enterpriseAdmin;    }    /* ------------------------------------------------ ./EnterpriseDAO methods ------------------------------------------------ */        /* ------------------------------------------------ ProfileDAO methods ------------------------------------------------ */    public function createProfile($name) { return $createdEnterprise = new Profile($name); }    public function deactivateProfile(Profile $profile) { return $this->profileDAO->deactivate($profile); }    public function deleteProfile(Profile $profile) { return $this->profileDAO->delete($profile); }    public function findOneProfile($searchedIdProfile) { return $this->profileDAO->findById($searchedIdProfile); }    public function findAllProfiles() { return $this->profileDAO->findAll(); }    public function saveProfile(Profile $profile) { return $this->profileDAO->save($profile); }    /* ------------------------------------------------ ./ProfileDAO methods ------------------------------------------------ */         /* ------------------------------------------------ DepartmentDAO methods ------------------------------------------------ */    public function createDepartment($name) { return $createdDepartment = new Department($name); }    public function deleteDepartment(Department $department) { return $this->departmentDAO->delete($department); }    public function findOneDepartment($searchedIdDepartment) { return $this->departmentDAO->findById($searchedIdDepartment); }    public function findAllDepartments() { return $this->departmentDAO->findAll(); }    /* ------------------------------------------------ ./DepartmentDAO methods ------------------------------------------------ */    /* ------------------------------------------------ ParticipantDAO Methods ------------------------------------------------ */    public function createparticipant($civility, $surname, $name, $email) { return $createdParticipant = new Participant($civility, $surname, $name, $email); }    public function deactivateParticipant(Participant $participant) { return $this->participantDAO->deactivate($participant); }    public function deleteParticipant(participant $participant) { return $this->participantDAO->delete($participant); }    public function findAllparticipants() { return $this->participantDAO->findAll(); }    public function findOneParticipant($searchedIdparticipant) { return $this->participantDAO->findById($searchedIdparticipant); }    public function saveParticipant(participant $participant) { return $this->participantDAO->save($participant); }    public function findAllParticipantsAsSalespersons() { return $this->participantDAO->findAllAsSalespersons(); }    public function findAllParticipantsAsSalespersonsByProvider($idProvider) { return $this->participantDAO->findAllParticipantsAsSalespersonsByProvider($idProvider); }    public function findAllParticipantsAsSalespersonsByProviderAndPf($idProvider, $idPurchasingFair) { return $this->participantDAO->findAllParticipantsAsSalespersonsByProviderAndPf($idProvider, $idPurchasingFair); }    public function summaryParticipants($idPurchasingFair) { return $this->participantDAO->summaryParticipants($idPurchasingFair); }    /* ------------------------------------------------ ./ParticipantDAO Methods ------------------------------------------------ */    /* ------------------------------------------------ LogDAO Methods ------------------------------------------------ */    public function createLog($oneEnterprise, $ipAddress) { return $createdLog = new Log($oneEnterprise, $ipAddress); }    public function findAllLogs() {         $arrayLogs = $this->logDAO->findAll();        foreach($arrayLogs as $value) { $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise())); }        return $arrayLogs;    }    public function findOneLog($searchedIdLog) {         $searchedLog = $this->logDAO->findById($searchedIdLog);        $searchedLog->setOneEnterprise($this->findOneEnterprise($searchedLog->getOneEnterprise()));        return $searchedLog;    }    public function saveLog(Log $log) { return $this->logDAO->save($log); }    public function findAllLogsForOneEnterprise(Enterprise $enterprise) {         $arrayLog = $this->logDAO->findByEnterprise($enterprise);        foreach($arrayLog as $value) { $value->setOneEnterprise($enterprise); }        return $arrayLog;    }    public function deleteLog($IdEnterprise){        return $this->logDAO->deletelog($IdEnterprise);    }    public function get_ip()    {        if ( isset ( $_SERVER['HTTP_X_FORWARDED_FOR'] ) )        {            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];        }        elseif ( isset ( $_SERVER['HTTP_CLIENT_IP'] ) )        {            $ip  = $_SERVER['HTTP_CLIENT_IP'];        }        else        {            $ip = $_SERVER['REMOTE_ADDR'];        }        return $ip;    }    /* ------------------------------------------------ ./LogDAO Methods ------------------------------------------------ */    /* ------------------------------------------------ LogPriseRdvDAO Methods ------------------------------------------------ */    public function createLogPriseRdvDAO($idEnterprise, $idPurchasingFair, $jourSelect) { return $createdLog = new LogPriseRdv($idEnterprise, $idPurchasingFair, $jourSelect); }    public function findAllLogPriseRdv() {         $arrayLogs = $this->logPriseRdvDAO->findAll();        return $arrayLogs;    }    public function findLogByIdEnterprise($searchedIdEnterprise) {        $searchedLog = $this->logPriseRdvDAO->findByIdEnterprise($searchedIdEnterprise);        return $searchedLog;    }    public function findLogByTwo($idPurchasingFair, $IdEnterprise) {        $searchedLog = $this->logPriseRdvDAO->findByTwo($idPurchasingFair, $IdEnterprise);        return $searchedLog;    }    public function findLogByIdEnterpriseByThree($idPurchasingFair, $jourSelect, $IdEnterprise) {        $searchedLog = $this->logPriseRdvDAO->findByThree($idPurchasingFair, $jourSelect, $IdEnterprise);        return $searchedLog;    }    public function findLogByIdEnterpriseByThreeBis($idPurchasingFair, $jourSelect, $IdEnterprise) {        $searchedLog = $this->logPriseRdvDAO->findByThreeBis($idPurchasingFair, $jourSelect, $IdEnterprise);        return $searchedLog;    }    public function saveLogPriseRdvDAO(LogPriseRdv $log) { return $this->logPriseRdvDAO->save($log); }    public function deleteLogPriseRdvDAO($IdEnterprise){        return $this->logPriseRdvDAO->delete($IdEnterprise);    }    public function deleteLogPriseRdvDAOBis($IdEnterprise, $idPurchasingFair/*, $jourSelect*/){        return $this->logPriseRdvDAO->deleteBis($IdEnterprise, $idPurchasingFair/*, $jourSelect*/);    }    /* ------------------------------------------------ ./LogPriseRdvDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ SalespersonDAO Methods ------------------------------------------------ */    public function createSalesperson($civility, $surname, $name) { return $createdSalesperson = new Salesperson($civility, $surname, $name); }    public function deactivateSalesperson(Salesperson $salesperson) { return $this->salespersonDAO->deactivate($salesperson); }    public function deleteSalesperson(Salesperson $salesperson) { return $this->salespersonDAO->delete($salesperson); }    public function findOneSalesperson($searchedIdSalesperson) { return $this->salespersonDAO->findById($searchedIdSalesperson); }    public function findAllSalespersons() { return $this->salespersonDAO->findAll(); }    public function saveSalesperson(Salesperson $salesperson) { return $this->salespersonDAO->save($salesperson); }        /* ------------------------------------------------ ./SalespersonDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentParticipantEnterpriseDAO Methods ------------------------------------------------ */    public function createAssignmentParticipantEnterprise(Participant $oneParticipant, Enterprise $oneEnterprise) { return $createdAPE = new AssignmentParticipantEnterprise($oneParticipant, $oneEnterprise); }    public function deleteAssignmentParticipantEnterprise(AssignmentParticipantEnterprise $assignmentParticipantEnterprise) { return $this->assignmentParticipantEnterpriseDAO->delete($assignmentParticipantEnterprise); }    public function findOneAssignmentParticipantEnterprise($searchIdParticipant, $searchedIdEnterprise) {         $oneAPE = $this->assignmentParticipantEnterpriseDAO->findByTwoIds($searchIdParticipant, $searchedIdEnterprise);        if($oneAPE != null) {            $oneAPE->setOneParticipant($this->findOneParticipant($oneAPE->getOneParticipant()));            $oneAPE->setOneEnterprise($this->findOneEnterprise($oneAPE->getOneEnterprise()));        }        return $oneAPE;    }    public function findAllAssignmentsParticipantEnterprise() {         $arrayAPE = $this->assignmentParticipantEnterpriseDAO->findAll();         foreach($arrayAPE as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));        }        return $arrayAPE;    }    public function findAllAssignmentsParticipantEnterpriseForOneParticipant($searchedIdParticipant) {        $arrayAPE = $this->assignmentParticipantEnterpriseDAO->findByOneId($searchedIdParticipant);         foreach($arrayAPE as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));        }        return $arrayAPE;        }    public function findAllAssignmentsParticipantEnterpriseForOneEnterprise($searchedIdEnterprise) {         $arrayAPE = $this->assignmentParticipantEnterpriseDAO->findAllAssignmentsparticipantEnterpriseForOneEnterprise($searchedIdEnterprise);         foreach($arrayAPE as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));        }        return $arrayAPE;    }    public function saveAssignmentParticipantEnterprise(AssignmentParticipantEnterprise $assignmentParticipantEnterprise) { return $this->assignmentParticipantEnterpriseDAO->insert($assignmentParticipantEnterprise); }        /* ------------------------------------------------ ./AssignmentParticipantEnterpriseDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentParticipantDepartmentDAO Methods ------------------------------------------------ */    public function createAssignmentParticipantDepartment(Participant $oneParticipant, Department $oneDepartment) { return $createdAPD = new AssignmentParticipantDepartment($oneParticipant, $oneDepartment); }    public function deleteAssignmentParticipantDepartment(AssignmentParticipantDepartment $assignmentParticipantDepartment) { return $this->assignmentParticipantDepartmentDAO->delete($assignmentParticipantDepartment); }    public function findOneAssignmentParticipantDepartment($searchedIdParticipant, $searchedIdDepartment) {         $oneAPD = $this->assignmentParticipantDepartmentDAO->findByTwoIds($searchedIdParticipant, $searchedIdDepartment);        if($oneAPD != null) {            $oneAPD->setOneParticipant($this->findOneParticipant($oneAPD->getOneParticipant()));            $oneAPD->setOneDepartment($this->findOneDepartment($oneAPD->getOneDepartment()));        }        return $oneAPD;    }    public function findAllAssignmentsParticipantDepartment() {         $arrayAPD = $this->assignmentParticipantDepartmentDAO->findAll();         foreach($arrayAPD as $value) {            $value->setOneParticipant($this->findOneparticipant($value->getOneparticipant()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));        }        return $arrayAPD;    }    public function findAssignmentsParticipantDepartmentByParticipant($searchedIdParticipant) {        $arrayAPD = $this->assignmentParticipantDepartmentDAO->findByParticipant($searchedIdParticipant);        foreach($arrayAPD as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));        }        return $arrayAPD;    }    public function saveAssignmentParticipantDepartment(AssignmentParticipantDepartment $assignmentParticipantDepartment) { return $this->assignmentParticipantDepartmentDAO->insert($assignmentParticipantDepartment); }        /* ------------------------------------------------ ./AssignmentParticipantDepartmentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ RequirementDAO methods ------------------------------------------------ */    public function createRequirement($oneStore, $oneProvider, $onePurchasingFair, $numberOfHours) { return $createdRequirement = new Requirement($oneStore, $oneProvider, $onePurchasingFair, $numberOfHours); }    public function deleteRequirement(Requirement $requirement) { return $this->requirementDAO->delete($requirement); }    public function findOneRequirement($searchedIdRequirement) {         $searchedRequirement =  $this->requirementDAO->findById($searchedIdRequirement);        if($searchedRequirement != null) {            $searchedRequirement->setOneStore($this->findOneEnterprise($searchedRequirement->getOneStore()));            $searchedRequirement->setOneProvider($this->findOneEnterprise($searchedRequirement->getOneProvider()));            $searchedRequirement->setOnePurchasingFair($this->findOnePurchasingFair($searchedRequirement->getOnePurchasingFair()));        }        return $searchedRequirement;    }    public function findRequirementFilteredDuo($oneStore, $onePurchasingFair) {         $arrayDuo = $this->requirementDAO->findByDuo($oneStore, $onePurchasingFair);        foreach($arrayDuo as $value) {            $value->setOneStore($oneStore);            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($onePurchasingFair);        }        return $arrayDuo;    }    public function findRequirementFilteredDuoSorted($oneStore, $onePurchasingFair) {         $arrayDuo = $this->requirementDAO->findByDuoSorted($oneStore, $onePurchasingFair);        foreach($arrayDuo as $value) {            $value->setOneStore($oneStore);            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($onePurchasingFair);        }        return $arrayDuo;    }    public function findRequirementFilteredDuoWithTotNumberHours($oneStore, $onePurchasingFair) {         $arrayDuo = array();        $arrayDuo['requirements'] = $this->requirementDAO->findByDuo($oneStore, $onePurchasingFair);        foreach($arrayDuo['requirements'] as $value) {            $value->setOneStore($oneStore);            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($onePurchasingFair);        }        $arrayDuo['totNumberOfHours'] = $this->requirementDAO->findTotalNumberHours($oneStore, $onePurchasingFair);        return $arrayDuo;    }    public function findRequirementFilteredDuoWithTotNumberHoursAndUnavs($oneStore, $onePurchasingFair) {         $arrayDuo = $this->findRequirementFilteredDuoWithTotNumberHours($oneStore, $onePurchasingFair);        $arrayDuo['unavs'] = $this->unavailabilityDAO->findEnterpriseUnavailabilities($oneStore, $onePurchasingFair);        return $arrayDuo;    }    public function deleteRequirementFilteredDuo($oneStore, $onePurchasingFair) { return $this->requirementDAO->deleteByDuo($oneStore, $onePurchasingFair); }    public function findRequirementFilteredTrio($oneStore, $oneProvider, $onePurchasingFair) {         $oneRequirement = $this->requirementDAO->findByTrio($oneStore, $oneProvider, $onePurchasingFair);         if($oneRequirement != NULL) {            $oneRequirement->setOneStore($oneStore);            $oneRequirement->setOneProvider($oneProvider);            $oneRequirement->setOnePurchasingFair($onePurchasingFair);        }        return $oneRequirement;    }    public function findAllRequirements() {         $arrayRequirements = $this->requirementDAO->findAll();        foreach($arrayRequirements as $value) {            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayRequirements;    }    public function findAllRequirementsByPf($idPurchasingFair) {         $arrayRequirements = $this->requirementDAO->findAllByPf($idPurchasingFair);        foreach($arrayRequirements as $value) {            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayRequirements;    }    // public function findAllRequirementsForStoreAndPurchasingFair($idStore, $idPurchasingFair) { return $this->requirementDAO->findAllFiltered($idStore, $idPurchasingFair); }    public function saveRequirement(Requirement $requirement) { return $this->requirementDAO->save($requirement); }    /* ------------------------------------------------ ./RequirementDAO methods ------------------------------------------------ */    /* ------------------------------------------------ Various methods ------------------------------------------------ */    public function getIpAddress() { return Various::getIP(); }    public function myFrenchDate($datetimeMySql) { return Various::myFrenchDate($datetimeMySql); }    public function myFrenchDatetime($datetimeMySql) { return Various::myFrenchDatetime($datetimeMySql); }    public function myFrenchTime($datetimeMySql) { return Various::myFrenchTime($datetimeMySql); }    public function deadline($datetimeMySql) { return Various::deadline($datetimeMySql); }    public function bool2str($bool) { return Various::bool2str($bool); }    public function compareObjects(&$o1, &$o2) { return Various::compareObjects($o1, $o2); }    public function generateFakeUsers($howMany) { return Various::generateFakeUsers($howMany); }    public function generateFakePF($howMany) { return Various::generateFakePF($howMany); }    public function purchasingFairIsClosedForUser($datetimeMySql) { return Various::purchasingFairIsClosedForUser($datetimeMySql); }    public function mychrono() { return Various::myChrono(); }    public function sixDigitsGenerator($howManyCombinationsDoYouWant) { return Various::SixDigitsGenerator($howManyCombinationsDoYouWant); }    public function generateQRCodes($idPurchasingFair, $arrayParticipants) { return Various::generateQRCodes($idPurchasingFair, $arrayParticipants); }    public function generateStickers($idPurchasingFair, $arrayParticipants) { return Various::generateStickers($idPurchasingFair, $arrayParticipants); }    public function convertDateRangeToMySqlFormat($dateRange) { return Unavailability::convertDateRangeToMySqlFormat($dateRange); }    public function convertTwoMySqlDatetimeToDateRangeFormat($tartDatetime, $endDatetime) { return Unavailability::convertTwoMySqlDatetimeToDateRangeFormat($tartDatetime, $endDatetime); }    public function generateParticipationDetailsPDF(Enterprise $oneEnterprise, PurchasingFair $onePurchasingFair) { ; } // DOES NOT WORK, ERROR DATA ALREADY SENT    public function sortParticipantsBySurnameAndName($arrayOfObjectsThatContainParticipantsObjects) { return Various::sortParticipantsBySurnameAndName($arrayOfObjectsThatContainParticipantsObjects); }    public function sortParticipantsBySurnameAndNameBis($arrayOfObjectsThatNotContainParticipantsObjects) { return Various::sortParticipantsBySurnameAndNameBis($arrayOfObjectsThatNotContainParticipantsObjects); }    public function sortPurchasingFairsById($arrayOfPurchasingFairs) { return Various::sortPurchasingFairsById($arrayOfPurchasingFairs); }    public function generateNColors($nColors) { return Various::generateNColors($nColors); }    public function generateNPasswords($nbPasswords) { return Various::generateNPasswords($nbPasswords); }    public function randomKey() { return Various::randomKey(); }    public function generateSQLQueriesPanelCodes() { return Various::generateSQLQueriesPanelCodes(); }    public function sendMail(MyEmail $myEmail) { return Various::sendMail($myEmail); }    public function castelAccess() { return Various::castelAccess(); }    public function numberFormat($numberToFormat, $numberFormat) { return Various::numberFormat($numberToFormat, $numberFormat); }    public function cors() { return Various::cors(); }	public function dumpDatabase() { return Various::dumpDatabase(); }	public function getServerName() { return Various::getServerName(); }    /* ------------------------------------------------ ./Various methods ------------------------------------------------ */        /* ------------------------------------------------ StatDAO methods ------------------------------------------------ */    public function numberOfParticipationsInAPurchasingFair(User $user) { return $this->statDAO->numberOfParticipationsInAPurchasingFair($user); }    public function numberOfConnectionsByMonth(User $user) { return $this->statDAO->numberOfConnectionsByMonth($user); }    public function heatmapConnections(user $user) { return $this->statDAO->heatmapConnections($user); }    /* ------------------------------------------------ ./StatDAO methods ------------------------------------------------ */        /* ------------------------------------------------ ParticipationDAO Methods ------------------------------------------------ */    public function createParticipation($oneParticipant, $onePurchasingFair, $passwordParticipant, $lunch) { return $createdParticipation = new Participation($oneParticipant, $onePurchasingFair, $passwordParticipant, $lunch); }    public function deleteParticipation(Participation $participation) { return $this->participationDAO->delete($participation); }    public function findOneParticipation($searchedIdParticipant, $searchedIdPurchasingFair) {         $oneParticipation =  $this->participationDAO->findByTwoIds($searchedIdParticipant, $searchedIdPurchasingFair);                 if( $oneParticipation != null ) {            $oneParticipation->setOneParticipant($this->findOneParticipant($oneParticipation->getOneParticipant()));            $oneParticipation->setOnePurchasingFair($this->findOnePurchasingFair($oneParticipation->getOnePurchasingFair()));        }        return $oneParticipation;            }    public function findAllParticipations() {        $arrayParticipations = $this->participationDAO->findAll();        foreach($arrayParticipations as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayParticipations;    }    public function saveParticipation(Participation $participation) { return $this->participationDAO->insert($participation); }    public function findAllParticipationsByEnterpriseAndPurchasingFair($oneEnterprise, $onePurchasingFair) {         $arrayParticipations = $this->participationDAO->findAllByEnterpriseAndPurchasingFair($oneEnterprise, $onePurchasingFair);        foreach($arrayParticipations as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayParticipations;    }    /* ------------------------------------------------ ./ParticipationDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ TypeOfPfDAO Methods ------------------------------------------------ */    public function createTypeOfPf($nameTypeOfPf) { return $newTypeOfPf = new TypeOfPf($nameTypeOfPf); }    public function findOneTypeOfPf($searchedIdTypeOfPf) { return $this->typeofPfDAO->findById($searchedIdTypeOfPf); }    public function findAllTypeOfPf() { return $this->typeofPfDAO->findAll(); }    /* ------------------------------------------------ ./TypeOfPfDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentSpStoreDAO Methods ------------------------------------------------ */    public function createAssignmentSpStore(Participant $oneParticipant, Enterprise $oneStore, Enterprise $oneProvider, PurchasingFair $onePurchasingFair) {         return $createdASS = new AssignmentSpStore($oneParticipant, $oneStore, $oneProvider, $onePurchasingFair);     }    public function deleteAssignmentSpStore(AssignmentSpStore $assignmentSpStore) { return $this->assignmentSpStoreDAO->delete($assignmentSpStore); }    public function deleteAssignmentSpStoreBis(AssignmentSpStore $assignmentSpStore) { return $this->assignmentSpStoreDAO->deleteBis($assignmentSpStore); }    public function findOneAssignmentSpStore($searchedIdParticipant, $searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair) {         $oneASS = $this->assignmentSpStoreDAO->findByFourIds($searchedIdParticipant, $searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair);        if($oneASS != null) {            $oneASS->setOneParticipant($this->findOneParticipant($oneASS->getOneParticipant()));            $oneASS->setOneStore($this->findOneEnterprise($oneASS->getOneStore()));            $oneASS->setOneProvider($this->findOneEnterprise($oneASS->getOneProvider()));            $oneASS->setOnePurchasingFair($this->findOnePurchasingFair($oneASS->getOnePurchasingFair()));        }        return $oneASS;    }    public function findOneAssignmentSpStoreBis($searchedIdProvider, $searchedIdPurchasingFair) {        $arrayASS = $this->assignmentSpStoreDAO->findByTwoIds($searchedIdProvider, $searchedIdPurchasingFair);        foreach($arrayASS as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayASS;        }    public function findDistinctSpStore($searchedIdProvider, $searchedIdPurchasingFair) {        $arrayASS = $this->assignmentSpStoreDAO->findDistinctSpStore($searchedIdProvider, $searchedIdPurchasingFair);        return $arrayASS;        }    public function findOneAssignmentSpStoreTer($searchedIdParticipant, $searchedIdProvider, $searchedIdPurchasingFair) {        $arrayASS = $this->assignmentSpStoreDAO->findByThreeIds($searchedIdParticipant, $searchedIdProvider, $searchedIdPurchasingFair);        foreach($arrayASS as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayASS;        }    public function findOneAssignmentSpStoreQuatro($searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair) {				$oneASS = $this->assignmentSpStoreDAO->findByThreeIdsBis($searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair);        if(!is_null($oneASS)) {            $oneASS->setOneParticipant($this->findOneParticipant($oneASS->getOneParticipant()));            $oneASS->setOneStore($this->findOneEnterprise($oneASS->getOneStore()));            $oneASS->setOneProvider($this->findOneEnterprise($oneASS->getOneProvider()));            $oneASS->setOnePurchasingFair($this->findOnePurchasingFair($oneASS->getOnePurchasingFair()));		}		return $oneASS;		// updated 12.07.2018 - now we use an array, not a simple object ! - STAND BY        // $arrayASS = $this->assignmentSpStoreDAO->findByThreeIdsBis($searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair);        // foreach($arrayASS as $value) {            // $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            // $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            // $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            // $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        // }        // return $arrayASS;        }    public function findByThreeIdsBisTwo($searchedIdStore, $searchedIdPurchasingFair) {        $arrayASS = $this->assignmentSpStoreDAO->findByThreeIdsBisTwo($searchedIdStore, $searchedIdPurchasingFair);        foreach($arrayASS as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayASS;        }    public function findAllAssignmentSpStoreByParticipant($searchedIdParticipant) {        $arrayASS = $this->assignmentSpStoreDAO->findAllByParticipant($searchedIdParticipant);        foreach($arrayASS as $value) {            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));            $value->setOneStore($this->findOneEnterprise($value->getOneStore()));            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayASS;         }    public function findAllAssignmentsSpStore() {         $arrayASS = $this->assignmentSpStoreDAO->findAll();         foreach($arrayASS as $value) {            $value->setOneParticipant($this->findOneparticipant($value->getOneparticipant()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayASS;    }    public function saveAssignmentSpStore(AssignmentSpStore $assignmentSpStore) { return $this->assignmentSpStoreDAO->insert($assignmentSpStore); }    public function summaryOfAssignedStores($searchedIdProvider, $searchedIdPurchasingFair) {        $arrayEnterprises = $this->assignmentSpStoreDAO->summaryOfAssignedStores($searchedIdProvider, $searchedIdPurchasingFair);        foreach($arrayEnterprises as $value) {            $value->setOneTypeOfProvider($this->findOneTypeOfProvider($value->getOneTypeOfProvider()));            $value->setOneDepartment($this->findOneDepartment($value->getOneDepartment()));            $value->setOneProfile($this->findOneProfile($value->getOneProfile()));        }        return $arrayEnterprises;    }    public function findDistinctProviders($idPurchasingFair){        $arrayASS = $this->assignmentSpStoreDAO->findDistinctProviders($idPurchasingFair);        return $arrayASS;     }    public function findAssignmentSpStore($searchedIdProvider, $searchedIdPurchasingFair){        $arrayASS = $this->assignmentSpStoreDAO->findAssignmentSpStore($searchedIdProvider, $searchedIdPurchasingFair);        return $arrayASS;     }    /* ------------------------------------------------ ./AssignmentSpStoreDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ QRCodeScanDAO Methods ------------------------------------------------ */    public function createQRCodeScan($onePurchasingFair, $oneEnterprise, $oneParticipant, $scanDatetime) {         return $createdQRCodeScan = new QRCodeScan($onePurchasingFair, $oneEnterprise, $oneParticipant, $scanDatetime);     }    public function findAllQRCodeScan() {         $arrayQRCodeScan = $this->qrcodeScanDAO->findAll();        foreach($arrayQRCodeScan as $value) {             $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));        }        return $arrayQRCodeScan;    }    public function findOneQRCodeScan($searchedIdQRCodeScan) {         $searchedQRCodeScan = $this->qrcodeScanDAO->findById($searchedIdQRCodeScan);        if(!empty($searchedQRCodeScan)) {            $searchedQRCodeScan->setOneEnterprise($this->findOneEnterprise($searchedQRCodeScan->getOneEnterprise()));            $searchedQRCodeScan->setOnePurchasingFair($this->findOneEnterprise($searchedQRCodeScan->getOnePurchasingFair()));            $searchedQRCodeScan->setOneParticipant($this->findOneParticipant($searchedQRCodeScan->getOneParticipant()));        }        return $searchedQRCodeScan;    }    public function deleteQRCodeScan($idQRCodeScan) { return $this->qrcodeScanDAO->delete($idQRCodeScan); }    public function saveQRCodeScan(QRCodeScan $qrcodeScan) { return $this->qrcodeScanDAO->insert($qrcodeScan); }    public function findAllQRCodeScanByTrio($idPurchasingFair, $idEnterprise, $idParticipant) {        $arrayQRCodeScan = $this->qrcodeScanDAO->findAllByTrio($idPurchasingFair, $idEnterprise, $idParticipant);        foreach($arrayQRCodeScan as $value) {             $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));            $value->setOneParticipant($this->findOneParticipant($value->getOneParticipant()));        }        return $arrayQRCodeScan;    }    /* ------------------------------------------------ ./QRCodeScanDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ EnterpriseContactDAO methods ------------------------------------------------ */    public function createEnterpriseContact($civility, $surname, $name, $email, $oneEnterprise) {        return new EnterpriseContact($civility, $surname, $name, $email, $this->findOneEnterprise($oneEnterprise));    }    public function deactivateEnterpriseContact(EnterpriseContact $enterpriseContact) { ; }    public function deleteEnterpriseContact(EnterpriseContact $enterpriseContact) { return $this->enterpriseContactDAO->delete($enterpriseContact); }    public function findOneEnterpriseContact($searchedIdEnterpriseContact) {        $enterpriseContactFinded = $this->enterpriseContactDAO->findById($searchedIdEnterpriseContact);        if($enterpriseContactFinded != null) {            $enterpriseContactFinded->setOneEnterprise($this->findOneEnterprise($enterpriseContactFinded->getOneEnterprise()));        }        return $enterpriseContactFinded;    }    public function findOneEnterpriseContactByEnterprise($idEnterprise) {        $enterpriseContactFinded = $this->enterpriseContactDAO->findByEnterprise($idEnterprise);        if($enterpriseContactFinded != null) {            $enterpriseContactFinded->setOneEnterprise($this->findOneEnterprise($enterpriseContactFinded->getOneEnterprise()));        }        return $enterpriseContactFinded;    }    public function findAllEnterpriseContact() {        $arrayentEnterpriseContactFinded = $this->enterpriseContactDAO->findAll();        foreach($arrayentEnterpriseContactFinded as $key => $value) {            $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));        }        return $arrayentEnterpriseContactFinded;    }    public function saveEnterpriseContact(EnterpriseContact $enterpriseContact) { return $this->enterpriseContactDAO->save($enterpriseContact); }    /* ------------------------------------------------ ./EnterpriseContactDAO methods ------------------------------------------------ */        /* ------------------------------------------------ Planning generation ------------------------------------------------ */    public function generatePlanning($idPurchasingFair) { }    /* ------------------------------------------------ ./Planning generation ------------------------------------------------ */        /* ------------------------------------------------ ProviderPresentDAO Methods ------------------------------------------------ */    public function createProviderPresent(Enterprise $oneProvider, PurchasingFair $onePurchasingFair) { return $createdPP = new ProviderPresent($oneProvider, $onePurchasingFair); }    public function deleteProviderPresent(ProviderPresent $providerPresent) { return $this->providerPresentDAO->delete($providerPresent); }    public function deletePPForOnePurchasingFair($idPurchasingFair){ return $this->providerPresentDAO->deleteForOnePurchasingFair($idPurchasingFair); }    public function findOneProviderPresent($searchIdProvider, $searchedIdPurchasingFair) {         $onePP = $this->providerPresentDAO->findByTwoIds($searchIdProvider, $searchedIdPurchasingFair);        if($onePP != null) {            $onePP->setOneProvider($this->findOneEnterprise($onePP->getOneProvider()));            $onePP->setOnePurchasingFair($this->findOnePurchasingFair($onePP->getOnePurchasingFair()));        }        return $onePP;    }    public function findOneProviderPresentBis($searchIdProvider, $searchedIdPurchasingFair) {         $onePP = $this->providerPresentDAO->findByTwoIds($searchIdProvider, $searchedIdPurchasingFair);        if($onePP != null) {            $onePP->setOneProvider($this->findOneEnterprise($onePP->getOneProvider()));        }        return $onePP;    }    public function findAllProviderPresent() {         $arrayPP = $this->providerPresentDAO->findAll();         foreach($arrayPP as $value) {            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayPP;    }    public function findAllProviderPresentForOneProvider($searchedIdProvider) {        $arrayPP = $this->providerPresentDAO->findByOneId($searchedIdProvider);         foreach($arrayPP as $value) {            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayPP;        }    public function findAllProviderPresentForOnePurchasingFair($searchedIdPurchasingFair) {         $arrayPP = $this->providerPresentDAO->findAllProviderPresentForOnePurchasingFair($searchedIdPurchasingFair);         foreach($arrayPP as $value) {            $value->setOneProvider($this->findOneEnterprise($value->getOneProvider()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));        }        return $arrayPP;    }    public function saveProviderPresent(ProviderPresent $providerPresent) { return $this->providerPresentDAO->insert($providerPresent); }        /* ------------------------------------------------ ./ProviderPresentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ TypeOfProviderDAO Methods ------------------------------------------------ */    public function createTypeOfProvider($nameTypeOfProvider) { return $newTypeOfProvider = new TypeOfProvider($nameTypeOfProvider); }    public function findOneTypeOfProvider($searchedIdTypeOfProvider) { return $this->typeOfProviderDAO->findById($searchedIdTypeOfProvider); }    public function findAllTypeOfProvider() { return $this->typeOfProviderDAO->findAll(); }    /* ------------------------------------------------ ./TypeOfProviderDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ SpecialGuestDAO Methods ------------------------------------------------ */    public function createSpecialGuest($oneEnterprise, $onePurchasingFair, $civility, $surname, $name, $days) {         return $createdSpecialGuest = new SpecialGuest($oneEnterprise, $onePurchasingFair, $civility, $surname, $name, $days);     }    public function findAllSpecialGuest() {         $arraySpecialGuest = $this->specialGuestDAO->findAll();        foreach($arraySpecialGuest as $value) {             $value->setOneEnterprise($this->findOneEnterprise($value->getOneEnterprise()));            $value->setOnePurchasingFair($this->findOnePurchasingFair($value->getOnePurchasingFair()));         }        return $arraySpecialGuest;    }    public function findOneSpecialGuest($searchedIdSpecialGuest) {         $searchedSpecialGuest = $this->specialGuestDAO->findById($searchedIdSpecialGuest);        if(!empty($searchedSpecialGuest)) {            $searchedSpecialGuest->setOneEnterprise($this->findOneEnterprise($searchedSpecialGuest->getOneEnterprise()));            $searchedSpecialGuest->setOnePurchasingFair($this->findOneEnterprise($searchedSpecialGuest->getOnePurchasingFair()));        }        return $searchedSpecialGuest;    }    public function findOneSpecialGuestByDay($idPurchasingFair, $Day) {         $searchedSpecialGuest = $this->specialGuestDAO->findByDay($idPurchasingFair, $Day);        return $searchedSpecialGuest;    }    public function findOneSpecialGuestByThree($idPurchasingFair, $Day, $idProvider){         $searchedSpecialGuest = $this->specialGuestDAO->findOneSpecialGuestByThree($idPurchasingFair, $Day, $idProvider);        return $searchedSpecialGuest;    }    public function deleteSpecialGuest($idSpecialGuest) { return $this->specialGuestDAO->delete($idSpecialGuest); }    public function deleteAllSpecialGuest() { return $this->specialGuestDAO->deleteAll(); }    public function saveSpecialGuest(SpecialGuest $specialGuest) { return $this->specialGuestDAO->save($specialGuest); }    public function findAllSpecialGuestForOneEnterpriseAndPf($idEnterprise, $idPurchasingFair) {         $arraySpecialGuest = $this->specialGuestDAO->findByEnterpriseAndPf($idEnterprise, $idPurchasingFair);        foreach($arraySpecialGuest as $value) {             $value->setOneEnterprise($this->findOneEnterprise($idEnterprise));            $value->setOnePurchasingFair($this->findOnePurchasingFair($idPurchasingFair));         }        return $arraySpecialGuest;    }    /* ------------------------------------------------ ./SpecialGuestDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ LunchDAO Methods ------------------------------------------------ */    public function createLunch($oneEnterprise, $onePurchasingFair, $lunchesPlanned, $lunchesCanceled, $lunchesDetails, $idParticipant) {         return $createdLunch = new Lunch($oneEnterprise, $onePurchasingFair, $lunchesPlanned, $lunchesCanceled, $lunchesDetails, $idParticipant);    }    public function lunchesCalculated($idPurchasingFair) {        return $this->lunchDAO->lunchesCalculated($idPurchasingFair);    }    public function saveLunch(Lunch $lunch) { return $this->lunchDAO->insert($lunch); }    public function updateLunch(Lunch $lunch) { return $this->lunchDAO->update($lunch) ; }    public function deleteAllLunchesByPf($idPurchasingFair) { return $this->lunchDAO->deleteAllByPf($idPurchasingFair); }    //public function deleteAllLunchesByPf($idEnterprise, $idPurchasingFair) { return $this->lunchDAO->deleteAllByPf($idPurchasingFair); }    public function findLunchForOneEnterpriseAndPf($idEnterprise, $idPurchasingFair) {         $lunch = $this->lunchDAO->findByEnterpriseAndPF($idEnterprise, $idPurchasingFair);        return $lunch;    }    public function findLunchByPfAndDay($idPurchasingFair, $Day){        $lunch = $this->lunchDAO->findLunchByPfAndDay($idPurchasingFair, $Day);        return $lunch;    }    public function findLunchForOneEnterpriseAndPfAndDay($idEnterprise, $idPurchasingFair, $Day) {         $lunch = $this->lunchDAO->findByEnterpriseAndPFAndDay($idEnterprise, $idPurchasingFair, $Day);        if( !empty($lunch) ) {             $lunch->setOneEnterprise($this->findOneEnterprise($idEnterprise));            $lunch->setOnePurchasingFair($this->findOnePurchasingFair($idPurchasingFair));         }        return $lunch;    }    public function findLunchForOneEnterpriseAndPfAndDay2($idEnterprise, $idPurchasingFair, $Day) {         $lunch = $this->lunchDAO->findByEnterpriseAndPFAndDay2($idEnterprise, $idPurchasingFair, $Day);        return $lunch;    }    public function findLunchForOneEnterpriseAndPfAndDayBis($idEnterprise, $idPurchasingFair, $Day, $idParticipant){         $lunch = $this->lunchDAO->findByEnterpriseAndPFAndDayBis($idEnterprise, $idPurchasingFair, $Day, $idParticipant);        return $lunch;    }    public function findArrayDayLunch($idEnterprise, $idPurchasingFair){        $lunch = $this->lunchDAO->findArrayDayLunch($idEnterprise, $idPurchasingFair);        return $lunch;    }    public function DeleteLunchByThree($idEnterprise, $idPurchasingFair, $Day) {        return $this->lunchDAO->DeleteLunchByThree($idEnterprise, $idPurchasingFair, $Day);    }    public function DeleteLunchByFour($idEnterprise, $idPurchasingFair, $Day, $idParticipant) {        return $this->lunchDAO->DeleteLunchByFour($idEnterprise, $idPurchasingFair, $Day, $idParticipant);    }    public function deleteAllLunchesForProviders() { return $this->lunchDAO->deleteAllByProviders(); }    public function findAllLunchesForProviders() {         $lunches = $this->lunchDAO->findAllByProviders();        foreach($lunches as $key => $lunch) {             $lunch->setOneEnterprise($this->findOneEnterprise($lunch->getOneEnterprise()));            $lunch->setOnePurchasingFair($this->findOnePurchasingFair($lunch->getOnePurchasingFair()));         }        return $lunches;    }    /* ------------------------------------------------ ./LunchDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AgentDAO Methods ------------------------------------------------ */    public function createAgent($civility, $surname, $name, $addressLine1, $addressLine2, $providers) {         return new Agent($civility, $surname, $name, $addressLine1, $addressLine2, $providers);    }    public function findAllAgent() { return $arrayAgent = $this->agentDAO->findAll(); }    public function findOneAgent($searchedIdAgent) { return $searchedAgent = $this->agentDAO->findById($searchedIdAgent); }    public function saveAgent(Agent $agent) { return $this->agentDAO->save($agent); }    public function deactivateAgent(Agent $agent) { return $this->agentDAO->deactivate($agent); }    public function deleteAgent(Agent $agent) { return $this->agentDAO->delete($agent); }    /* ------------------------------------------------ ./AgentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ StoreWorkforceDAO Methods ------------------------------------------------ */    public function createStoreWorkforce($oneEnterprise, $outerClothing, $underClothing, $shoes) {         return $createdStoreWorkforce = new StoreWorkforce($oneEnterprise, $outerClothing, $underClothing, $shoes);     }    public function saveStoreWorkforce(StoreWorkforce $storeWorkforce) { return $this->storeWorkforceDAO->insert($storeWorkforce); }    public function updateStoreWorkforce(StoreWorkforce $storeWorkforce) { return $this->storeWorkforceDAO->update($storeWorkforce) ; }    public function findStoreWorkforceForOneEnterprise($idEnterprise) {         $storeWorkforce = $this->storeWorkforceDAO->findByEnterprise($idEnterprise);        if( !empty($storeWorkforce) ) {             $storeWorkforce->setOneEnterprise($this->findOneEnterprise($idEnterprise));        }        return $storeWorkforce;    }    /* ------------------------------------------------ ./StoreWorkforceDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ PresentDAO Methods ------------------------------------------------ */    public function createPresent($oneEnterprise, $oneParticipant, $onePurchasingFair, $presentDetails) {         return $createdPresent = new Present($oneEnterprise, $oneParticipant, $onePurchasingFair, $presentDetails);     }    public function savePresent(Present $present) { return $this->presentDAO->insert($present); }    public function updatePresent(Present $present) { return $this->presentDAO->update($present); }    public function deletePresent(Present $present) { return $this->presentDAO->delete($present) ; }    public function findPresentByDuo($idEnterprise, $idPurchasingFair) {         $presents = $this->presentDAO->findAllByDuo($idEnterprise, $idPurchasingFair);        foreach($presents as $key => $present) {            $present->setOneEnterprise($this->findOneEnterprise($present->getOneEnterprise()));            $present->setOneParticipant($this->findOneParticipant($present->getOneParticipant()));            $present->setOnePurchasingFair($this->findOnePurchasingFair($present->getOnePurchasingFair()));        }        return $presents;    }    public function findPresentByTrio($idEnterprise, $idParticipant, $idPurchasingFair) {         $present = $this->presentDAO->findAllByTrio($idEnterprise, $idParticipant, $idPurchasingFair);        if(!empty($present)) {            $present->setOneEnterprise($this->findOneEnterprise($present->getOneEnterprise()));            $present->setOneParticipant($this->findOneParticipant($present->getOneParticipant()));            $present->setOnePurchasingFair($this->findOnePurchasingFair($present->getOnePurchasingFair()));        }        return $present;    }    public function deleteAllPresentsForProviders() { return $this->presentDAO->deleteAllByProviders(); }    public function findAllPresentsForProviders() {         $presents = $this->presentDAO->findAllByProviders();        foreach($presents as $key => $present) {             $present->setOneEnterprise($this->findOneEnterprise($present->getOneEnterprise()));            $present->setOneParticipant($this->findOneParticipant($present->getOneParticipant()));             $present->setOnePurchasingFair($this->findOnePurchasingFair($present->getOnePurchasingFair()));         }        return $presents;    }    /* ------------------------------------------------ ./PresentDAO Methods ------------------------------------------------ */}?>