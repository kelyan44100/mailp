<?phprequire_once dirname ( __FILE__ ) . '/../dao/AgentDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/AssignmentParticipantDepartmentDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/AssignmentParticipantEnterpriseDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/AssignmentSpStoreDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/DepartmentDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/EnterpriseDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/EnterpriseContactDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/LogDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/LunchDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/ParticipantDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/ParticipationDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/PresentDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/ProfileDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/ProviderPresentDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/PurchasingFairDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/QRCodeScanDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/RequirementDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/SalespersonDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/SpecialGuestDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/StatDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/StoreWorkforceDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/TypeOfPfDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/TypeOfProviderDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/UnavailabilityDAO.class.php';require_once dirname ( __FILE__ ) . '/../dao/UnavailabilitySpDAO.class.php';require_once dirname ( __FILE__ ) . '/../domain/Agent.class.php';require_once dirname ( __FILE__ ) . '/../domain/AssignmentParticipantDepartment.class.php';require_once dirname ( __FILE__ ) . '/../domain/AssignmentParticipantEnterprise.class.php';require_once dirname ( __FILE__ ) . '/../domain/AssignmentSpStore.class.php';require_once dirname ( __FILE__ ) . '/../domain/Department.class.php';require_once dirname ( __FILE__ ) . '/../domain/Enterprise.class.php';require_once dirname ( __FILE__ ) . '/../domain/EnterpriseContact.class.php';require_once dirname ( __FILE__ ) . '/../domain/Log.class.php';require_once dirname ( __FILE__ ) . '/../domain/Lunch.class.php';require_once dirname ( __FILE__ ) . '/../domain/MyEmail.class.php';require_once dirname ( __FILE__ ) . '/../domain/Participant.class.php';require_once dirname ( __FILE__ ) . '/../domain/Participation.class.php';require_once dirname ( __FILE__ ) . '/../domain/Present.class.php';require_once dirname ( __FILE__ ) . '/../domain/Profile.class.php';require_once dirname ( __FILE__ ) . '/../domain/ProviderPresent.class.php';require_once dirname ( __FILE__ ) . '/../domain/PurchasingFair.class.php';require_once dirname ( __FILE__ ) . '/../domain/QRCodeScan.class.php';require_once dirname ( __FILE__ ) . '/../domain/RandomColor.class.php';require_once dirname ( __FILE__ ) . '/../domain/Requirement.class.php';require_once dirname ( __FILE__ ) . '/../domain/Salesperson.class.php';require_once dirname ( __FILE__ ) . '/../domain/SpecialGuest.class.php';require_once dirname ( __FILE__ ) . '/../domain/StoreWorkforce.class.php';require_once dirname ( __FILE__ ) . '/../domain/TypeOfPf.class.php';require_once dirname ( __FILE__ ) . '/../domain/TypeOfProvider.class.php';require_once dirname ( __FILE__ ) . '/../domain/Unavailability.class.php';require_once dirname ( __FILE__ ) . '/../domain/UnavailabilitySp.class.php';require_once dirname ( __FILE__ ) . '/../domain/Various.class.php';require_once dirname ( __FILE__ ) . '/../domain/Planning.class.php';require_once dirname ( __FILE__ ) . '/../domain/PlanningDay.class.php';require_once dirname ( __FILE__ ) . '/../domain/TimeSlot.class.php';require_once dirname ( __FILE__ ) . '/../domain/prise_rdv_store.class.php';require_once dirname ( __FILE__ ) . '/../dao/prise_rdv_storeDAO.class.php';require_once dirname ( __FILE__ ) . '/../domain/LogPriseRdv.class.php';require_once dirname ( __FILE__ ) . '/../dao/LogPriseRdvDAO.class.php';// Don't require these classes again, require only AppService.class on each pageinterface AppService {    /* ------------------------------------------------ prise_rdv_storeDAO methods ------------------------------------------------ */    public function createPriseRdvStore( $idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime, $jourString, $startString, $endString );    public function deletePriseRdvStore(prise_rdv_store $prise_rdv_store);    public function findOnePriseRdvStore($searchedIdRDV);    public function findOnePriseRdvByIdCommercial($searchedIdCommercial,$searchedIdStore);    public function findOnePriseRdvByIdCommercialAndPF($searchedIdCommercial,$searchedIdStore,$searchedIdPurchasingFair);    public function findIndispoSameHourWithOtherStoreWithSp($searchedIdPurchasingFair,$searchedIdCommercial,$jourString,$searchedIdStore);    public function findTwoPriseRdvStore($searchedIdStore, $searchedIdPurchasingFair);    public function findPriseRdvByTwo($jourString, $searchedIdPurchasingFair);    public function findThreePriseRdvStoreBis($searchedIdStore, $searchedIdPurchasingFair, $jourString);    public function findRdvFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair, $jourString);    public function findRdvCommercialByThree($searchedIdCommecial, $searchedIdPurchasingFair, $jourString);    public function findCommerciauxFournisseurByThree($searchedIdProvider, $searchedIdPurchasingFair);    public function findCommerciauxFournisseurByThreeBis($searchedIdProvider, $searchedIdPurchasingFair, $idCommercial);    public function findRdvFournisseurByQuattro($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore);    public function findRdvCommercialByQuattro($searchedIdCommecial, $searchedIdPurchasingFair, $jourString, $idStore);    public function findRdvFournisseurByQuattroBis($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idCommercial);    public function findRdvFournisseurByCinq($searchedIdProvider, $searchedIdPurchasingFair, $jourString, $idStore, $idCommercial);    public function findThreePriseRdvStore($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur);    public function findByQuatre($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString);    public function findAllPriseRdvStore();    public function findByAll($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime, $endDateTime);    public function findByAllBis($idStore, $idFournisseur, $idCommercial, $idPurchasingFair, $startDatetime);    public function savePriseRdvStore(prise_rdv_store $prise_rdv_store);    public function findRdvSameDayWithOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString,$startString, $endString);    public function findRdvSameHourWithOtherStoreWithSp($searchedIdPurchasingFair,$searchedIdCommercial,$jourString,$startString, $endString,$idstore);    public function findIndisposOtherProvider($searchedIdStore,$searchedIdPurchasingFair,$searchedIdFournisseur,$jourString);    public function deleteRDV($idPurchasingFair, $idStore, $idFournisseur, $start_datetime);    public function findAllEnterprisesAsStoresPfBis($searchedIdPurchasingFair);    public function findAllEnterprisesAsProviderPfBis($searchedIdPurchasingFair);    /* ------------------------------------------------ ./prise_rdv_storeDAO methods ------------------------------------------------ */    /* ------------------------------------------------ UnavailabilityDAO methods ------------------------------------------------  */    public function createUnavailability($startDatetime, $endDatetime, $idEnterprise, $idPurchasingFair);    public function deactivateUnavailability(Unavailability $unavailability);    public function deleteUnavailability(Unavailability $unavailability);    public function findOneUnavailability($searchedIdUnavailability);    public function findAllUnavailabilities();    public function findEnterpriseUnavailabilities(Enterprise $enterprise, PurchasingFair $purchasingFair);    public function saveUnavailability(Unavailability $unavailability);    public function findPurchasingFairUnavailabilities(PurchasingFair $purchasingFair);    /* ------------------------------------------------ ./UnavailabilityDAO methods ------------------------------------------------  */        /* ------------------------------------------------ UnavailabilitySpDAO methods ------------------------------------------------  */    public function createUnavailabilitySp($startDatetime, $endDatetime, $idParticipant, $idPurchasingFair);    public function deactivateUnavailabilitySp(UnavailabilitySp $unavailabilitySp);    public function deleteUnavailabilitySp(UnavailabilitySp $unavailabilitySp);    public function findOneUnavailabilitySp($searchedIdUnavailabilitySp);    public function findAllUnavailabilitiesSp();    public function findAllUnavailabilitiesSpByParticipant($searchedIdParticipant);    public function saveUnavailabilitySp(UnavailabilitySp $unavailabilitySp);    public function findParticipantUnavailabilitiesSp(Participant $participant, PurchasingFair $purchasingFair);    public function findPurchasingFairUnavailabilitiesSp(PurchasingFair $purchasingFair);    public function findSpWithUnavByEntAndPf($idEnterprise, $idPurchasingFair);    public function findByThreeIdsBisTwo($searchedIdStore, $searchedIdPurchasingFair);    /* ------------------------------------------------ ./UnavailabilitySpDAO methods ------------------------------------------------  */        /* ------------------------------------------------ PurchasingFairDAO methods ------------------------------------------------ */    public function createPurchasingFair($namePurchasingFair, $hexColor, $dayRdv, $startDatetime, $endDateTime, $lunchBreak, $oneTypeOfPf, $registrationClosingDateMagasin, $registrationClosingDateFournisseur);    public function deactivatePurchasingFair(PurchasingFair $purchasingFair);    public function deletePurchasingFair(PurchasingFair $purchasingFair);    public function findOnePurchasingFair($searchedIdPurchasingFair);    public function findAllPurchasingFairs();    public function findAllPurchasingFairsAdmin();    public function findLastPurchasingFair();    public function savePurchasingFair(PurchasingFair $purchasingFair);    /* ------------------------------------------------ ./PurchasingFairDAO methods ------------------------------------------------ */        /* ------------------------------------------------ EnterpriseDAO methods ------------------------------------------------ */    public function createEnterprise($name, $password, $panel, $postalAddress, $postalCode, $city, $vat, $oneTypeOfProvider, $oneProfile, $oneDepartment);    public function authentication($idEnterprise, $password, $profileEnterprise);    public function deactivateEnterprise(Enterprise $enterprise);    public function deleteEnterprise(Enterprise $enterprise);    public function findOneEnterprise($searchedIdEnterprise);    public function findAllEnterprises();    public function findAllEnterprisesAsProviders();    public function findAllEnterprisesAsProvidersPf($searchedIdPurchasingFair);    public function findAllProvidersWithTextilePriority($idPurchasingFair);    public function findAllEnterprisesAsStores();    public function findAllEnterprisesAsStoresPf($searchedIdPurchasingFair);    public function findAllEnterprisesAsStoresPfAbsent($searchedIdPurchasingFair);    public function saveEnterprise(Enterprise $enterprise);    public function saveEnterprisePasswordOVH(Enterprise $enterprise);    public function findAllStoresNotAvailableForTimeSlotAndPf($onePurchasingFair, $startTimeSlot, $endTimeSlot);    public function findAllEnterprisesAsAdmin();    public function authenticationAdmin($password);    /* ------------------------------------------------ ./EnterpriseDAO methods ------------------------------------------------ */        /* ------------------------------------------------ ProfileDAO methods ------------------------------------------------ */    public function createProfile($name);    public function deactivateProfile(Profile $profile);    public function deleteProfile(Profile $profile);    public function findOneProfile($searchedIdProfile);    public function findAllProfiles();    public function saveProfile(Profile $profile);    /* ------------------------------------------------ ./ProfileDAO methods ------------------------------------------------ */         /* ------------------------------------------------ DepartmentDAO methods ------------------------------------------------ */    public function createDepartment($name);    public function deleteDepartment(Department $department);    public function findOneDepartment($searchedIdDepartment);    public function findAllDepartments();    /* ------------------------------------------------ ./DepartmentDAO methods ------------------------------------------------ */    /* ------------------------------------------------ ParticipantDAO Methods ------------------------------------------------ */    public function createParticipant($civility, $surname, $name, $email);    public function deactivateParticipant(Participant $participant);    public function deleteParticipant(Participant $participant);    public function findAllParticipants();    public function findOneParticipant($searchedIdParticipant);    public function saveParticipant(Participant $participant);    public function findAllParticipantsAsSalespersons();    public function findAllParticipantsAsSalespersonsByProvider($idProvider);    public function findAllParticipantsAsSalespersonsByProviderAndPf($idProvider, $idPurchasingFair);    public function summaryParticipants($idPurchasingFair);    /* ------------------------------------------------ ./ParticipantDAO Methods ------------------------------------------------ */    /* ------------------------------------------------ LogDAO Methods ------------------------------------------------ */    public function createLog($oneEnterprise, $ipAddress);    public function findAllLogs();    public function findOneLog($searchedIdLog);    public function saveLog(Log $log);    public function findAllLogsForOneEnterprise(Enterprise $enterprise);    public function deleteLog($IdEnterprise);    /* ------------------------------------------------ ./LogDAO Methods ------------------------------------------------ */    /* ------------------------------------------------ LogPriseRdvDAO Methods ------------------------------------------------ */    public function createLogPriseRdvDAO($idEnterprise, $idPurchasingFair, $jourSelect);    public function findAllLogPriseRdv();    public function findLogByIdEnterprise($searchedIdEnterprise);    public function findLogByTwo($idPurchasingFair, $IdEnterprise);    public function findLogByIdEnterpriseByThree($idPurchasingFair, $jourSelect, $IdEnterprise);    public function findLogByIdEnterpriseByThreeBis($idPurchasingFair, $jourSelect, $IdEnterprise);    public function saveLogPriseRdvDAO(LogPriseRdv $log);    public function deleteLogPriseRdvDAO($IdEnterprise);    public function deleteLogPriseRdvDAOBis($IdEnterprise, $idPurchasingFair/*, $jourSelect*/);    /* ------------------------------------------------ ./LogPriseRdvDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ SalespersonDAO Methods ------------------------------------------------ */    public function createSalesperson($civility, $surname, $name);    public function deactivateSalesperson(Salesperson $salesperson);    public function deleteSalesperson(Salesperson $salesperson);    public function findOneSalesperson($searchedIdSalesperson);    public function findAllSalespersons();    public function saveSalesperson(Salesperson $salesperson);       /* ------------------------------------------------ ./SalespersonDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentParticipantEnterpriseDAO Methods ------------------------------------------------ */    public function createAssignmentParticipantEnterprise(Participant $participant, Enterprise $oneEnterprise);    public function deleteAssignmentParticipantEnterprise(AssignmentPArticipantEnterprise $assignmentParticipantEnterprise);    public function findOneAssignmentParticipantEnterprise($searchIdParticipant, $searchedIdEnterprise);    public function findAllAssignmentsParticipantEnterprise();    public function findAllAssignmentsParticipantEnterpriseForOneParticipant($searchedIdParticipant);    public function findAllAssignmentsParticipantEnterpriseForOneEnterprise($searchedIdEnterprise);    public function saveAssignmentParticipantEnterprise(AssignmentparticipantEnterprise $assignmentParticipantEnterprise);      /* ------------------------------------------------ ./AssignmentParticipantEnterpriseDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentParticipantDepartmentDAO Methods ------------------------------------------------ */    public function createAssignmentParticipantDepartment(Participant $oneParticipant, Department $oneDepartment);    public function deleteAssignmentParticipantDepartment(AssignmentParticipantDepartment $assignmentParticipantDepartment);    public function findOneAssignmentParticipantDepartment($searchedIdParticipant, $searchedIdDepartment);    public function findAllAssignmentsParticipantDepartment();    public function findAssignmentsParticipantDepartmentByParticipant($searchedIdParticipant);    public function saveAssignmentParticipantDepartment(AssignmentParticipantDepartment $assignmentParticipantDepartment);        /* ------------------------------------------------ ./AssignmentParticipantDepartmentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ RequirementDAO methods ------------------------------------------------ */    public function createRequirement($oneStore, $oneProvider, $onePurchasingFair, $numberOfHours);    public function deleteRequirement(Requirement $requirement);    public function findOneRequirement($searchedIdRequirement);    public function findRequirementFilteredDuo($oneStore, $onePurchasingFair);    public function findRequirementFilteredDuoSorted($oneStore, $onePurchasingFair);    public function findRequirementFilteredDuoWithTotNumberHours($oneStore, $onePurchasingFair);    public function findRequirementFilteredDuoWithTotNumberHoursAndUnavs($oneStore, $onePurchasingFair);    public function deleteRequirementFilteredDuo($oneStore, $onePurchasingFair);    public function findRequirementFilteredTrio($oneStore, $oneProvider, $onePurchasingFair);    public function findAllRequirements();    public function findAllRequirementsByPf($idPurchasingFair);     // public function findAllRequirementsForStoreAndPurchasingFair($idStore, $idPurchasingFair);    public function saveRequirement(Requirement $requirement);    /* ------------------------------------------------ ./RequirementDAO methods ------------------------------------------------ */    /* ------------------------------------------------ Various methods ------------------------------------------------ */    public function getIpAddress();    public function myFrenchDate($datetimeMySql);    public function myFrenchDatetime($datetimeMySql);    public function myFrenchTime($datetimeMySql);    public function deadline($datetimeMySql);    public function bool2str($bool);    public function compareObjects(&$o1, &$o2);    public function generateFakeUsers($howMany);    public function generateFakePF($howMany);    public function purchasingFairIsClosedForUser($datetimeMySql);    public function mychrono();    public function sixDigitsGenerator($howManyCombinationsDoYouWant);    public function generateQRCodes($idPurchasingFair, $arrayParticipants);    public function generateStickers($idPurchasingFair, $arrayParticipants);    public function convertDateRangeToMySqlFormat($dateRange);    public function convertTwoMySqlDatetimeToDateRangeFormat($tartDatetime, $endDatetime);    public function generateParticipationDetailsPDF(Enterprise $oneEnterprise, PurchasingFair $onePurchasingFair);    public function sortParticipantsBySurnameAndName($arrayOfObjectsThatContainParticipantsObjects);    public function sortParticipantsBySurnameAndNameBis($arrayOfObjectsThatNotContainParticipantsObjects);    public function sortPurchasingFairsById($arrayOfPurchasingFairs);    public function generateNColors($nColors);    public function generateNPasswords($nbPasswords);    public function randomKey();    public function generateSQLQueriesPanelCodes();    public function sendMail(MyEmail $myEmail);    public function castelAccess();    public function numberFormat($numberToFormat, $numberFormat);    public function cors();	public function dumpDatabase();	public function getServerName();    /* ------------------------------------------------ ./Various methods ------------------------------------------------ */        /* ------------------------------------------------ StatDAO methods ------------------------------------------------ */    public function numberOfParticipationsInAPurchasingFair(User $user);    public function numberOfConnectionsByMonth(User $user);    public function heatmapConnections(user $user);    /* ------------------------------------------------ ./StatDAO methods ------------------------------------------------ */        /* ------------------------------------------------ ParticipationDAO Methods ------------------------------------------------ */    public function createParticipation($oneParticipant, $onePurchasingFair, $passwordParticipant, $lunch);    public function deleteParticipation(Participation $participation);    public function findOneParticipation($searchedIdParticipant, $searchedIdPurchasingFair);    public function findAllParticipations();    public function saveParticipation(Participation $participation);        public function findAllParticipationsByEnterpriseAndPurchasingFair($oneEnterprise, $onePurchasingFair);    /* ------------------------------------------------ ./ParticipationDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ TypeOfPfDAO Methods ------------------------------------------------ */    public function createTypeOfPf($nameTypeOfPf);    public function findOneTypeOfPf($searchedIdTypeOfPf);    public function findAllTypeOfPf();    /* ------------------------------------------------ ./TypeOfPfDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AssignmentSpStoreDAO Methods ------------------------------------------------ */    public function createAssignmentSpStore(Participant $oneParticipant, Enterprise $oneStore, Enterprise $oneProvider, PurchasingFair $onePurchasingFair);    public function deleteAssignmentSpStore(AssignmentSpStore $assignmentSpStore);    public function deleteAssignmentSpStoreBis(AssignmentSpStore $assignmentSpStore);    public function findAllAssignmentsSpStore(); /* BUG */    public function saveAssignmentSpStore(AssignmentSpStore $assignmentSpStore);    public function findOneAssignmentSpStore($searchedIdParticipant, $searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair);    public function findOneAssignmentSpStoreBis($searchedIdProvider, $searchedIdPurchasingFair);    public function findDistinctSpStore($searchedIdProvider, $searchedIdPurchasingFair);    public function findAssignmentSpStore($searchedIdProvider, $searchedIdPurchasingFair);    public function findOneAssignmentSpStoreTer($searchedIdParticipant, $searchedIdProvider, $searchedIdPurchasingFair);    public function findOneAssignmentSpStoreQuatro($searchedIdStore, $searchedIdProvider, $searchedIdPurchasingFair);    public function findAllAssignmentSpStoreByParticipant($searchedIdParticipant);    public function summaryOfAssignedStores($searchedIdProvider, $searchedIdPurchasingFair);    public function findDistinctProviders($idPurchasingFair);    /* ------------------------------------------------ ./AssignmentSpStoreDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ QRCodeScanDAO Methods ------------------------------------------------ */    public function createQRCodeScan($onePurchasingFair, $oneEnterprise, $oneParticipant, $scanDatetime);    public function findAllQRCodeScan();    public function findOneQRCodeScan($searchedIdQRCodeScan);    public function deleteQRCodeScan($idQRCodeScan);    public function saveQRCodeScan(QRCodeScan $qrcodeScan);    public function findAllQRCodeScanByTrio($idPurchasingFair, $idEnterprise, $idParticipant);    /* ------------------------------------------------ ./QRCodeScanDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ EnterpriseContactDAO methods ------------------------------------------------ */    public function createEnterpriseContact($civility, $surname, $name, $email, $oneEnterprise);    public function deactivateEnterpriseContact(EnterpriseContact $enterpriseContact);    public function deleteEnterpriseContact(EnterpriseContact $enterpriseContact);    public function findOneEnterpriseContact($searchedIdEnterpriseContact);    public function findOneEnterpriseContactByEnterprise($idEnterprise);    public function findAllEnterpriseContact();    public function saveEnterpriseContact(EnterpriseContact $enterpriseContact);    /* ------------------------------------------------ ./EnterpriseContactDAO methods ------------------------------------------------ */    /* ------------------------------------------------ Planning generation ------------------------------------------------ */    /* ------------------------------------------------ ./Planning generation ------------------------------------------------ */        /* ------------------------------------------------ ProviderPresentDAO Methods ------------------------------------------------ */    public function createProviderPresent(Enterprise $oneProvider, PurchasingFair $idPurchasingFair);    public function deleteProviderPresent(ProviderPresent $providerPresent);    public function deletePPForOnePurchasingFair($idPurchasingFair);    public function findOneProviderPresent($searchIdProvider, $searchedIdPurchasingFair);    public function findAllProviderPresent();    public function findAllProviderPresentForOneProvider($searchedIdProvider);    public function findAllProviderPresentForOnePurchasingFair($searchedIdPurchasingFair);    public function saveProviderPresent(ProviderPresent $providerPresent);    /* ------------------------------------------------ ./ProviderPresentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ TypeOfPfDAO Methods ------------------------------------------------ */    public function createTypeOfProvider($nameTypeOfProvider);    public function findOneTypeOfProvider($searchedIdTypeOfProvider);    public function findAllTypeOfProvider();    /* ------------------------------------------------ ./TypeOfPfDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ SpecialGuestDAO Methods ------------------------------------------------ */    public function createSpecialGuest($oneEnterprise, $onePurchasingFair, $civility, $surname, $name, $days);    public function findAllSpecialGuest();    public function findOneSpecialGuest($idSpecialGuest);    public function findOneSpecialGuestByDay($idPurchasingFair, $Day);    public function findOneSpecialGuestByThree($idPurchasingFair, $Day, $idProvider);    public function saveSpecialGuest(SpecialGuest $specialGuest);    public function deleteSpecialGuest($idSpecialGuest);    public function deleteAllSpecialGuest();    public function findAllSpecialGuestForOneEnterpriseAndPf($idEnterprise, $idPurchasingFair);    /* ------------------------------------------------ ./SpecialGuestDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ LunchDAO Methods ------------------------------------------------ */    public function createLunch($oneEnterprise, $onePurchasingFair, $lunchesPlanned, $lunchesCanceled, $lunchesDetails, $idParticipant);    public function lunchesCalculated($idPurchasingFair);    public function saveLunch(Lunch $lunch);    public function updateLunch(Lunch $lunch);    public function deleteAllLunchesByPf($idPurchasingFair);    public function findLunchForOneEnterpriseAndPf($idEnterprise, $idPurchasingFair);    public function findLunchByPfAndDay($idPurchasingFair, $Day);    public function findLunchForOneEnterpriseAndPfAndDay($idEnterprise, $idPurchasingFair, $Day);    public function findLunchForOneEnterpriseAndPfAndDay2($idEnterprise, $idPurchasingFair, $Day);    public function findLunchForOneEnterpriseAndPfAndDayBis($idEnterprise, $idPurchasingFair, $Day, $idParticipant);    public function findArrayDayLunch($idEnterprise, $idPurchasingFair);    public function DeleteLunchByThree($idEnterprise, $idPurchasingFair, $Day);    public function DeleteLunchByFour($idEnterprise, $idPurchasingFair, $Day, $idParticipant);    public function deleteAllLunchesForProviders();    public function findAllLunchesForProviders();    /* ------------------------------------------------ ./LunchDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ AgentDAO Methods ------------------------------------------------ */    public function createAgent($civility, $surname, $name, $addressLine1, $addressLine2, $providers);    public function findAllAgent();    public function findOneAgent($searchedIdAgent);    public function saveAgent(Agent $agent);    public function deactivateAgent(Agent $agent);    public function deleteAgent(Agent $agent);    /* ------------------------------------------------ ./AgentDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ StoreWorkforceDAO Methods ------------------------------------------------ */    public function createStoreWorkforce($oneEnterprise, $outerClothing, $underClothing, $shoes);    public function saveStoreWorkforce(StoreWorkforce $storeWorkforce);    public function updateStoreWorkforce(StoreWorkforce $storeWorkforce);    public function findStoreWorkforceForOneEnterprise($idEnterprise);    /* ------------------------------------------------ ./StoreWorkforceDAO Methods ------------------------------------------------ */        /* ------------------------------------------------ PresentDAO Methods ------------------------------------------------ */    public function createPresent($oneEnterprise, $oneParticipant, $onePurchasingFair, $presentDetails);    public function savePresent(Present $present);    public function updatePresent(Present $present);    public function deletePresent(Present $present);    public function findPresentByDuo($idEnterprise, $idPurchasingFair);    public function findPresentByTrio($idEnterprise, $idParticipant, $idPurchasingFair);    public function deleteAllPresentsForProviders();    public function findAllPresentsForProviders();    /* ------------------------------------------------ ./PresentDAO Methods ------------------------------------------------ */}?>